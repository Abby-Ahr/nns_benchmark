
#include <flann/flann.hpp>
#include <flann/io/hdf5.h>


#include <fstream>
#include <stdio.h>


using namespace flann;
using std::endl;
using std::ofstream;

float compute_precision(const flann::Matrix<int>& match, const flann::Matrix<int>& indices)
{
	int count = 0;

	assert(match.rows == indices.rows);
	size_t nn = std::min(match.cols, indices.cols);

	for (size_t i=0; i<match.rows; ++i) {
		for (size_t j=0;j<nn;++j) {
			for (size_t k=0;k<nn;++k) {
				if (match[i][j]==indices[i][k]) {
					count ++;
				}
			}
		}
	}

	return float(count)/(nn*match.rows);
}

float compute_recall_at(const size_t nn, const flann::Matrix<int>& match, const flann::Matrix<int>& indices)
{
	int count = 0;

	assert(match.rows == indices.rows);

	for (size_t i=0; i<match.rows; ++i) 
	{
		for (size_t j=0;j<nn;++j) 
		{
			if (match[i][j]==indices[i][0]) 
			{
				count ++;
				break;
			}
		}
	}

	return float(count)/(match.rows);
}


int main(int argc, char** argv)
{
    

    Matrix<float> dataset;
    Matrix<float> query;
    load_from_file(dataset, "/home/liwen/Downloads/Dataset/CIFAR/data/dataset.hdf5","dataset");
    load_from_file(query, "/home/liwen/Downloads/Dataset/CIFAR/data/dataset.hdf5","query");
    
    int nn =100;
    
    ofstream out;
    out.open("/home/liwen/Downloads/Dataset/CIFAR/exp_fig/result/flann_Linear_result.txt");

    //build index
    Index<L2<float> > index(dataset, flann::LinearIndexParams());
    index.buildIndex();
    out<<"#Algorithm = Linear"<<endl;
                                                                                            
    // do a knn search, using 128 checks
    
    Matrix<int> indices(new int[query.rows*nn], query.rows, nn);
    Matrix<float> dists(new float[query.rows*nn], query.rows, nn);

    clock_t start_time_=clock();
    index.knnSearch(query, indices, dists, nn, flann::SearchParams());
    double search_time = double(clock()-start_time_)/CLOCKS_PER_SEC;
	
    flann::save_to_file(indices,"/home/liwen/Downloads/Dataset/CIFAR/gnd/Linear_result.hdf5","result");
    delete[] indices.ptr();
    delete[] dists.ptr();
    

    delete[] dataset.ptr();
    delete[] query.ptr();
    
  
    
    return 0;
}


